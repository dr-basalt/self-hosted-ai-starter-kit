#!/usr/bin/env python3
"""
Script de configuration automatique des mod√®les OpenWebUI
Configure les mod√®les avec des param√®tres optimis√©s via l'API OpenWebUI
"""

import requests
import json
import time
import os
from typing import Dict, Any

class OpenWebUIConfigurator:
    def __init__(self, base_url: str = "http://localhost:3000"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def wait_for_service(self, max_retries: int = 30) -> bool:
        """Attendre que le service OpenWebUI soit disponible"""
        print("‚è≥ Attente du d√©marrage d'OpenWebUI...")
        for i in range(max_retries):
            try:
                response = self.session.get(f"{self.base_url}/api/version", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ OpenWebUI est pr√™t!")
                    return True
            except requests.exceptions.RequestException:
                pass
            time.sleep(2)
            print(f"   Tentative {i+1}/{max_retries}...")
        return False
    
    def configure_models(self):
        """Configurer les mod√®les avec des param√®tres optimis√©s"""
        print("üîß Configuration des mod√®les optimis√©s...")
        
        # Configuration des mod√®les avec param√®tres optimis√©s
        models_config = {
            "llama2": {
                "name": "llama2",
                "display_name": "Llama 2 (Optimis√©)",
                "description": "Mod√®le Llama 2 optimis√© pour la conversation",
                "parameters": {
                    "temperature": 0.7,
                    "top_p": 0.9,
                    "top_k": 40,
                    "max_tokens": 2048,
                    "repeat_penalty": 1.1,
                    "frequency_penalty": 0.0,
                    "presence_penalty": 0.0
                },
                "context_length": 4096,
                "prompt_template": "<s>[INST] {prompt} [/INST]",
                "stop_sequences": ["</s>", "[INST]", "[/INST]"]
            },
            "phi3": {
                "name": "phi3",
                "display_name": "Phi-3 (Optimis√©)",
                "description": "Mod√®le Phi-3 optimis√© pour la cr√©ativit√©",
                "parameters": {
                    "temperature": 0.8,
                    "top_p": 0.95,
                    "top_k": 50,
                    "max_tokens": 4096,
                    "repeat_penalty": 1.05,
                    "frequency_penalty": 0.1,
                    "presence_penalty": 0.1
                },
                "context_length": 8192,
                "prompt_template": "<|user|>\n{prompt}<|end|>\n<|assistant|>",
                "stop_sequences": ["<|end|>", "<|user|>"]
            },
            "gemma2": {
                "name": "gemma2",
                "display_name": "Gemma 2 (Optimis√©)",
                "description": "Mod√®le Gemma 2 optimis√© pour la pr√©cision",
                "parameters": {
                    "temperature": 0.6,
                    "top_p": 0.85,
                    "top_k": 30,
                    "max_tokens": 3072,
                    "repeat_penalty": 1.15,
                    "frequency_penalty": 0.05,
                    "presence_penalty": 0.05
                },
                "context_length": 6144,
                "prompt_template": "<start_of_turn>user\n{prompt}<end_of_turn>\n<start_of_turn>model\n",
                "stop_sequences": ["<end_of_turn>", "<start_of_turn>"]
            }
        }
        
        # Configuration via l'API OpenWebUI
        for model_name, config in models_config.items():
            try:
                print(f"  üìù Configuration de {model_name}...")
                
                # Cr√©er/Modifier le mod√®le via l'API
                model_data = {
                    "name": config["name"],
                    "display_name": config["display_name"],
                    "description": config["description"],
                    "parameters": config["parameters"],
                    "context_length": config["context_length"],
                    "prompt_template": config["prompt_template"],
                    "stop_sequences": config["stop_sequences"],
                    "enabled": True
                }
                
                # Endpoint pour cr√©er/modifier un mod√®le
                response = self.session.post(
                    f"{self.base_url}/api/models",
                    json=model_data,
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code in [200, 201]:
                    print(f"    ‚úÖ {model_name} configur√© avec succ√®s")
                else:
                    print(f"    ‚ö†Ô∏è  {model_name}: {response.status_code} - {response.text}")
                    
            except Exception as e:
                print(f"    ‚ùå Erreur lors de la configuration de {model_name}: {e}")
    
    def configure_memory_settings(self):
        """Configurer les param√®tres de m√©moire"""
        print("üß† Configuration des param√®tres de m√©moire...")
        
        memory_config = {
            "enabled": True,
            "collection_name": "openwebui_memory",
            "embedding_model": "all-MiniLM-L6-v2",
            "tenant_separator": ":",
            "max_context_length": 8192,
            "similarity_threshold": 0.7,
            "max_results": 10
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/memory/settings",
                json=memory_config,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                print("  ‚úÖ Param√®tres de m√©moire configur√©s")
            else:
                print(f"  ‚ö†Ô∏è  Configuration m√©moire: {response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå Erreur configuration m√©moire: {e}")
    
    def configure_voice_settings(self):
        """Configurer les param√®tres vocaux"""
        print("üé§ Configuration des param√®tres vocaux...")
        
        voice_config = {
            "stt_engine": "openai",
            "stt_model": "whisper-1",
            "tts_engine": "openai",
            "tts_model": "tts-1",
            "tts_voice": "alloy",
            "enabled": True
        }
        
        try:
            response = self.session.post(
                f"{self.base_url}/api/voice/settings",
                json=voice_config,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                print("  ‚úÖ Param√®tres vocaux configur√©s")
            else:
                print(f"  ‚ö†Ô∏è  Configuration vocale: {response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå Erreur configuration vocale: {e}")

def main():
    """Fonction principale"""
    print("üöÄ Configuration automatique d'OpenWebUI")
    print("=" * 50)
    
    # R√©cup√©rer l'URL depuis les variables d'environnement ou utiliser la valeur par d√©faut
    base_url = os.getenv("OPENWEBUI_URL", "http://localhost:3000")
    
    configurator = OpenWebUIConfigurator(base_url)
    
    # Attendre que le service soit pr√™t
    if not configurator.wait_for_service():
        print("‚ùå Impossible de se connecter √† OpenWebUI")
        return False
    
    # Configurer les mod√®les
    configurator.configure_models()
    
    # Configurer la m√©moire
    configurator.configure_memory_settings()
    
    # Configurer les param√®tres vocaux
    configurator.configure_voice_settings()
    
    print("\n‚úÖ Configuration termin√©e!")
    print(f"üåê Acc√©dez √† OpenWebUI: {base_url}")
    print("üîë Connectez-vous avec les identifiants par d√©faut")
    
    return True

if __name__ == "__main__":
    main()
