volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  openwebui_storage:
  openwebui_models:

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
  env_file:
    - path: .env
      required: true

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    networks: ['demo']
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./n8n/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - "0.0.0.0:5678:5678"
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "0.0.0.0:6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage

  openwebui:
    build:
      context: .
      dockerfile: Dockerfile.openwebui
    hostname: openwebui
    container_name: openwebui
    networks: ['demo']
    restart: unless-stopped
    ports:
      - "0.0.0.0:3000:3000"
      - "0.0.0.0:5001:5001"
    volumes:
      - openwebui_storage:/app/open-webui/data
      - openwebui_models:/app/open-webui/models
    environment:
      - OLLAMA_API_BASE_URL=http://ollama:11434/api
      - OLLAMA_BASE_URL=http://ollama:11434
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      # Configuration de base pour OpenWebUI
      - ENABLE_SIGNUP=true
      - ENABLE_LOGIN_FORM=true
      - CORS_ALLOW_ORIGIN=*
      # Configuration HTTPS pour accès aux appareils multimédias
      - ENABLE_HTTPS=true
      - SSL_CERT_FILE=/app/certs/cert.pem
      - SSL_KEY_FILE=/app/certs/key.pem
      # Configuration STT/TTS avec OpenAI APIs
      - USER_PERMISSIONS_CHAT_STT=True
      - USER_PERMISSIONS_CHAT_TTS=True
      - USER_PERMISSIONS_CHAT_CALL=True
      - AUDIO_STT_ENGINE=openai
      - AUDIO_STT_MODEL=whisper-1
      - AUDIO_STT_SUPPORTED_CONTENT_TYPES=audio/wav,audio/mp3,audio/m4a,audio/webm
      - AUDIO_TTS_ENGINE=openai
      - AUDIO_TTS_MODEL=tts-1
      - AUDIO_TTS_VOICE=alloy
      - AUDIO_TTS_SPLIT_ON=punctuation
      # Configuration OpenAI API (à configurer dans .env)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - qdrant

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-models-cpu:
    profiles: ["cpu"]
    image: ollama/ollama:latest
    networks: ['demo']
    container_name: ollama-pull-models-cpu
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
    command:
      - "-c"
      - |
        sleep 10
        ollama pull tinyllama:1.1b-chat
        ollama pull phi3:3.8b
        ollama pull qwen2.5:3b-instruct
        ollama pull llama3.2:latest
        ollama pull gemma2:2b
    depends_on:
      - ollama-cpu

  ollama-pull-models-gpu:
    profiles: ["gpu-nvidia"]
    image: ollama/ollama:latest
    networks: ['demo']
    container_name: ollama-pull-models-gpu
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
    command:
      - "-c"
      - |
        sleep 10
        ollama pull tinyllama:1.1b-chat
        ollama pull phi3:3.8b
        ollama pull qwen2.5:3b-instruct
        ollama pull llama3.2:latest
        ollama pull gemma2:2b
    depends_on:
      - ollama-gpu

  ollama-pull-models-gpu-amd:
    profiles: ["gpu-amd"]
    image: ollama/ollama:rocm
    networks: ['demo']
    container_name: ollama-pull-models-gpu-amd
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
    command:
      - "-c"
      - |
        sleep 10
        ollama pull tinyllama:1.1b-chat
        ollama pull phi3:3.8b
        ollama pull qwen2.5:3b-instruct
        ollama pull llama3.2:latest
        ollama pull gemma2:2b
    depends_on:
      - ollama-gpu-amd

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd
